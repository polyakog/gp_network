{"version":3,"file":"static/js/271.19d2f729.chunk.js","mappings":"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","sources":["webpack://gp-project/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonSend\":\"ChatPage_buttonSend__nParV\",\"buttonSettings\":\"ChatPage_buttonSettings__zwpTh\"};","import React, { useEffect, useRef, useState } from \"react\"\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppDispatchType, AppStateType } from \"../../redux/redux-store\"\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../../redux/chat-reducer\"\r\nimport noPic from '../../assets/images/noPic.jpg'\r\nimport css from './ChatPage.module.css'\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\n\r\n\r\nexport const ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch: AppDispatchType = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Error. Please reload the page</div>}\r\n        <>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </>\r\n\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        var element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight-element.scrollTop) - element.clientHeight)<300){\r\n            !isAutoScroll && setIsAutoScroll(true)            \r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false) \r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{ height: '500px', overflowY: 'scroll' }} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n    let userPhoto: string\r\n    message.photo === null ? userPhoto = noPic : userPhoto = message.photo\r\n    console.log('>>>>>>>>>Messages')\r\n    return <div>\r\n        <div>\r\n            <img src={userPhoto} style={{ width: '30px' }} alt='no img' />\r\n            <b style={{ margin: '10px', display: 'inline-flex', justifySelf: 'center' }}>{message.userName}</b>\r\n            <i style={{ fontSize: '10px' }}>(User Id: {message.userId}) </i>\r\n        </div>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch: AppDispatchType = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) { return }\r\n\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button className={css.buttonSend} disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n            <Link to=\"/settings\" > \r\n            <button className={css.buttonSettings} >...</button> {/* добавить: настройку autoscroll, кол-во messagesLoaded (import messagesLoaded from chat-reducer)*/} \r\n            </Link>\r\n            \r\n        </div>\r\n    </div>\r\n}\r\n\r\n"],"names":["ChatPage","_jsx","children","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","_Fragment","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","_ref","userPhoto","photo","noPic","console","log","src","width","alt","margin","display","justifySelf","userName","fontSize","userId","_useState3","_useState4","setMessage","onChange","value","className","css","disabled","onClick","sendMessage","Link","to"],"sourceRoot":""}